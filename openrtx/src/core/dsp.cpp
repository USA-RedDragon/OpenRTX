/***************************************************************************
 *   Copyright (C) 2020 - 2022 by Federico Amedeo Izzo IU2NUO,             *
 *                                Niccol√≤ Izzo IU2KIN,                     *
 *                                Silvano Seva IU2KWO,                     *
 *                                Frederik Saraci IU2NRO                   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, see <http://www.gnu.org/licenses/>   *
 ***************************************************************************/

#include <dsp.h>
#include <arm_math.h>

void dsp_resetFilterState(filter_state_t *state)
{
    state->u[0] = 0.0f;
    state->u[1] = 0.0f;
    state->u[2] = 0.0f;

    state->y[0] = 0.0f;
    state->y[1] = 0.0f;
    state->y[2] = 0.0f;

    state->initialised = false;
}

void dsp_pwmCompensate(filter_state_t *state, audio_sample_t *buffer,
                       size_t length)
{
    static constexpr float a =  4982680082321166792352.0f;
    static constexpr float b = -6330013275146484168000.0f;
    static constexpr float c =  1871109008789062500000.0f;
    static constexpr float d =  548027992248535162477.0f;
    static constexpr float e = -24496793746948241250.0f;
    static constexpr float f =  244617462158203125.0f;

    // Initialise filter with first two values, for smooth transient.
    if(length <= 2) return;

    if(state->initialised == false)
    {
        state->u[2] = static_cast< float >(buffer[0]);
        state->u[1] = static_cast< float >(buffer[1]);
        state->initialised = true;
    }

    for(size_t i = 2; i < length; i++)
    {
        state->u[0] = static_cast< float >(buffer[i]);
        state->y[0] = (a/d)*(state->u[0])
                    + (b/d)*(state->u[1])
                    + (c/d)*(state->u[2])
                    - (e/d)*(state->y[1])
                    - (f/d)*(state->y[2]);

        state->u[2] = state->u[1];
        state->u[1] = state->u[0];
        state->y[2] = state->y[1];
        state->y[1] = state->y[0];
        buffer[i] = static_cast< audio_sample_t >((state->y[0] * 0.5f) + 0.5f);
    }
}

void dsp_dcRemoval(filter_state_t *state, audio_sample_t *buffer, size_t length)
{
    /*
     * Removal of DC component performed using an high-pass filter with
     * transfer function G(z) = (z - 1)/(z - 0.999).
     * Recursive implementation of the filter is:
     * y(k) = u(k) - u(k-1) + 0.999*y(k-1)
     */

    if(length < 2) return;

    static constexpr float alpha = 0.999f;
    size_t pos = 0;

    if(state->initialised == false)
    {
        state->u[1] = static_cast< float >(buffer[0]);
        state->initialised = true;
        pos = 1;
    }

    for(; pos < length; pos++)
    {
        state->u[0] = static_cast< float >(buffer[pos]);
        state->y[0] = (state->u[0])
                    - (state->u[1])
                    + alpha * (state->y[1]);

        state->u[1] = state->u[0];
        state->y[1] = state->y[0];
        buffer[pos] = static_cast< audio_sample_t >(state->y[0] + 0.5f);
    }
}

void dsp_invertPhase(audio_sample_t *buffer, uint16_t length)
{
    for(uint16_t i = 0; i < length; i++)
    {
        buffer[i] = -buffer[i];
    }
}

#define BLOCK_SIZE            160
#define NUM_TAPS              232

static float32_t firStateF32[BLOCK_SIZE + NUM_TAPS - 1];

const float32_t firCoeffs32[NUM_TAPS] = {
    -0.000000000000000002,
    -0.000000000000000012,
    -0.000000000000000011,
    -0.000000000006212937,
    -0.000000000011954730,
    -0.000000000007766123,
    -0.000000000025831534,
    -0.000000000025838093,
    -0.000000000009145391,
    -0.000000000042315358,
    0.000000000002592675,
    0.000000000021558515,
    -0.000000000002681792,
    0.000000000124801364,
    0.000000000103255473,
    0.000000000149499407,
    0.000000000323756627,
    0.000000000208588597,
    0.000000000382525539,
    0.000000000440518029,
    0.000000000229714650,
    0.000000000494835250,
    0.000000000201211241,
    0.000000000000822821,
    0.000000000156354677,
    -0.000000000603120166,
    -0.000000000605054398,
    -0.000000000881315476,
    -0.000000001876718952,
    -0.000000001565076882,
    -0.000000002513926752,
    -0.000000003135115892,
    -0.000000002678096801,
    -0.000000004169527813,
    -0.000000003736876207,
    -0.000000003650429432,
    -0.000000005008752779,
    -0.000000003341208419,
    -0.000000004215346878,
    -0.000000004390395562,
    0.000001800503592334,
    -0.000005835376023381,
    0.000007459196930206,
    -0.000000001287619441,
    -0.000017466799100836,
    0.000034349539982370,
    -0.000032456502517413,
    -0.000000001668733822,
    0.000053258675058607,
    -0.000093540480864927,
    0.000080870998507535,
    0.000000002021037944,
    -0.000116495141726081,
    0.000194790462096642,
    -0.000161520662851211,
    -0.000000001861465368,
    0.000217563547040769,
    -0.000353935129745473,
    0.000286428872929523,
    0.000000003111189698,
    -0.000370172452334948,
    0.000591588551919719,
    -0.000471046595166420,
    -0.000000004126004410,
    0.000591579619747795,
    -0.000933467685229024,
    0.000734511725076095,
    0.000000005658810786,
    -0.000902911005707187,
    0.001410933229750573,
    -0.001100095065045785,
    -0.000000007840248795,
    0.001329809273483369,
    -0.002062091098680439,
    0.001596144727308578,
    -0.000000001140963363,
    -0.001903772438951994,
    0.002934073176693265,
    -0.002261467519869882,
    -0.000017725880585203,
    0.002617334476932871,
    -0.004182180029639535,
    0.002975152898632329,
    -0.000227308638981602,
    -0.003961464402640134,
    0.005268563374634427,
    -0.004620026524056162,
    -0.000262669563542952,
    0.004905455623012697,
    -0.007398482392383745,
    0.006485544247799908,
    0.001286419489921807,
    -0.004718829464604618,
    0.013255708662523295,
    -0.004025760366308973,
    0.004772840963286621,
    0.014765802025895423,
    -0.008107398388913773,
    0.016920655994376838,
    0.005525445177251133,
    -0.008633479455481359,
    0.021884505088133749,
    -0.016595744319228348,
    -0.005422474974438806,
    0.008132526388693145,
    -0.046654312570000384,
    -0.000305254752127845,
    -0.031576512413335436,
    -0.070577728754880567,
    0.004407165072879499,
    -0.099089563229048341,
    -0.061566790485906020,
    0.007357893029065799,
    -0.230190057610209275,
    0.150804550339334209,
    0.674978720028617474,
    0.150804550339333321,
    -0.230190057610209442,
    0.007357893029065769,
    -0.061566790485906187,
    -0.099089563229047883,
    0.004407165072879395,
    -0.070577728754880928,
    -0.031576512413335207,
    -0.000305254752127771,
    -0.046654312570000446,
    0.008132526388693245,
    -0.005422474974438859,
    -0.016595744319228230,
    0.021884505088133676,
    -0.008633479455481397,
    0.005525445177251189,
    0.016920655994376692,
    -0.008107398388913768,
    0.014765802025895447,
    0.004772840963286569,
    -0.004025760366308935,
    0.013255708662523237,
    -0.004718829464604614,
    0.001286419489921835,
    0.006485544247799851,
    -0.007398482392383705,
    0.004905455623012697,
    -0.000262669563542990,
    -0.004620026524056129,
    0.005268563374634429,
    -0.003961464402640141,
    -0.000227308638981605,
    0.002975152898632296,
    -0.004182180029639517,
    0.002617334476932868,
    -0.000017725880585208,
    -0.002261467519869864,
    0.002934073176693248,
    -0.001903772438951997,
    -0.000000001140963332,
    0.001596144727308562,
    -0.002062091098680445,
    0.001329809273483365,
    -0.000000007840248816,
    -0.001100095065045778,
    0.001410933229750556,
    -0.000902911005707186,
    0.000000005658810816,
    0.000734511725076095,
    -0.000933467685229025,
    0.000591579619747792,
    -0.000000004126004425,
    -0.000471046595166419,
    0.000591588551919716,
    -0.000370172452334948,
    0.000000003111189713,
    0.000286428872929519,
    -0.000353935129745474,
    0.000217563547040768,
    -0.000000001861465376,
    -0.000161520662851212,
    0.000194790462096634,
    -0.000116495141726102,
    0.000000002021037937,
    0.000080870998507536,
    -0.000093540480864910,
    0.000053258675058608,
    -0.000000001668733833,
    -0.000032456502517419,
    0.000034349539982373,
    -0.000017466799100846,
    -0.000000001287619433,
    0.000007459196930206,
    -0.000005835376023380,
    0.000001800503592338,
    -0.000000004390395556,
    -0.000000004215346884,
    -0.000000003341208420,
    -0.000000005008752776,
    -0.000000003650429432,
    -0.000000003736876208,
    -0.000000004169527805,
    -0.000000002678096807,
    -0.000000003135115906,
    -0.000000002513926755,
    -0.000000001565076888,
    -0.000000001876718947,
    -0.000000000881315446,
    -0.000000000605054396,
    -0.000000000603120169,
    0.000000000156354678,
    0.000000000000822804,
    0.000000000201211237,
    0.000000000494835261,
    0.000000000229714641,
    0.000000000440518033,
    0.000000000382525538,
    0.000000000208588599,
    0.000000000323756622,
    0.000000000149499403,
    0.000000000103255471,
    0.000000000124801361,
    -0.000000000002681794,
    0.000000000021558527,
    0.000000000002592676,
    -0.000000000042315362,
    -0.000000000009145390,
    -0.000000000025838099,
    -0.000000000025831546,
    -0.000000000007766117,
    -0.000000000011954740,
    -0.000000000006212936,
    0.000000000000000001,
    -0.000000000000000024,
    0.000000000000000005,
};

// float32_t  snr;
arm_fir_instance_f32 S;

/* Call FIR init function to initialize the instance structure. */
void dsp_fir_init() {
    arm_fir_init_f32(&S, NUM_TAPS, (float32_t *)&firCoeffs32[0], &firStateF32[0], BLOCK_SIZE);
}

void dsp_lowPassFilter(float32_t *filterbuf, uint16_t length)
{
    uint32_t i;
    uint32_t numBlocks = length/BLOCK_SIZE;

    /* ----------------------------------------------------------------------
    ** Call the FIR process function for every BLOCK_SIZE samples
    ** ------------------------------------------------------------------- */

    for(i=0; i < numBlocks; i++)
    {
        arm_fir_f32(&S, filterbuf + (i * BLOCK_SIZE), filterbuf + (i * BLOCK_SIZE), BLOCK_SIZE);
    }
}
